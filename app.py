from flask import Flask, render_template, request
import os
import time
import pyfiglet

app = Flask(__name__)

# Replace with the actual paths to your trained models (if applicable)
pe_model_path = "./Classifier/classifier.pkl"
pe_features_path = "./Classifier/features.pkl"
pe_vectorizer_path = "./Classifier/pickel_model.pkl"
url_vectorizer_path = "./Classifier/pickel_vector.pkl"

def run_pe_scan(file_path):
    # Load the trained model and features
    with open(pe_model_path, 'rb') as f:
        model = joblib.load(f)
    with open(pe_features_path, 'rb') as f:
        features = pickle.load(f)

    try:
        # Extract PE file features
        pe_data = extract_infos(file_path)
        pe_features = list(map(lambda x: pe_data[x], features))

        # Perform prediction
        prediction = model.predict([pe_features])[0]
        scan_result = "The file is predicted to be: " + ['malicious', 'legitimate'][prediction]

    except Exception as e:
        scan_result = "Error during PE file scanning: {}".format(str(e))

    return scan_result


def run_url_scan(url):
    # Simulate URL scanning logic
    # (Replace with calls to your url_main.py functions)
    print(f"Scanning URL: {url}")
    time.sleep(2)  # Simulate processing time
    return "Scan results for URL will be displayed here"

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/scan", methods=["POST"])
def scan():
    scan_type = request.form.get("scan_type")
    file_path = request.form.get("file_path")
    url = request.form.get("url")

    if scan_type == "pe" and file_path:
        scan_result = run_pe_scan(file_path)
    elif scan_type == "url" and url:
        scan_result = run_url_scan(url)
    else:
        scan_result = "Invalid scan type or missing input."

    return render_template("scan_results.html", scan_result=scan_result)

if __name__ == "__main__":
    app.run(debug=True)